using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using TweedeZit.Infrastructure;
using TweedeZit.Models.Domain;

namespace TweedeZit.Controllers
{
    [Authorize]
    public class TellingController : Controller
    {
        private IMedewerkerRepository _medewerkerRepository;

        public TellingController(IMedewerkerRepository medewerkerRepository)
        {
            this._medewerkerRepository = medewerkerRepository;
        }

        public ActionResult Index([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker)
        {
            return View(medewerker);
        }

        public ActionResult EditDag([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker, int tellingDagId)
        {
            ViewBag.Message = "Wijzig dag " + medewerker.GetTellingDag(tellingDagId).Naam;
            return View("EditDag", medewerker.GetTellingDag(tellingDagId));
        }

        [HttpPost]
        public ActionResult EditDag([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker, int tellingDagId, FormCollection formValues)
        {
            var tellingDag = medewerker.GetTellingDag(tellingDagId);
            if (tellingDag == null)
            {
                return RedirectToAction("Index", "Telling");
            }

            if (TryUpdateModel(tellingDag, formValues.ToValueProvider()))
            {
                _medewerkerRepository.SaveChanges();
                TempData["Msg"] = "Dag succesvol gewijzigd!";
                return RedirectToAction("Index", "Telling");
            }
            else
            {
                return RedirectToAction("Index", "Telling");
            }

        }


        public ActionResult EditTijdvak([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker, int tellingDagId, int tijdvakId)
        {
            ViewBag.Message = "Wijzig tijdvak " + medewerker.GetTellingDag(tellingDagId).GetTijdvak(tijdvakId).Van + "u - " + medewerker.GetTellingDag(tellingDagId).GetTijdvak(tijdvakId).Tot + "u van trainingsdag " + medewerker.GetTellingDag(tellingDagId).Naam + " " + medewerker.GetTellingDag(tellingDagId).Datum.Day + "/" + medewerker.GetTellingDag(tellingDagId).Datum.Month + "/" + medewerker.GetTellingDag(tellingDagId).Datum.Year;
            return View("EditTijdvak", medewerker.GetTellingDag(tellingDagId).GetTijdvak(tijdvakId));
        }

        [HttpPost]
        public ActionResult EditTijdvak([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker, int tellingDagId, int tijdvakId, FormCollection formValues)
        {
            var tijdvak = medewerker.GetTellingDag(tellingDagId).GetTijdvak(tijdvakId);
            if (tijdvak == null)
            {
                return RedirectToAction("Index", "Telling");
            }

            if (TryUpdateModel(tijdvak, formValues.ToValueProvider()))
            {
                _medewerkerRepository.SaveChanges();
                TempData["Msg"] = "Tijdvak succesvol gewijzigd!";
                return RedirectToAction("Index", "Telling");
            }
            else
            {
                return RedirectToAction("Index", "Telling");
            }
        }

        public ActionResult CreateTellingDag([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker)
        {
            return View(new TellingDag());
        }

        [HttpPost]
        public ActionResult CreateTellingDag([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker, TellingDag tellingDag)
        {
            if (ModelState.IsValid)
            {
                medewerker.TellingDagen.Add(tellingDag);
                _medewerkerRepository.SaveChanges();
                TempData["Msg"] = "Dag succesvol aangemaakt, maak nu een tijdspanne aan.";
                return RedirectToAction("CreateTijdvak","Telling", tellingDag);
            } 
            else 
            {
                return View(tellingDag);
            }
        }

        public ActionResult CreateTijdvak([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker, TellingDag tellingdag)
        {           
            ViewBag.Message = tellingdag.Naam + " " + tellingdag.Datum.Date.Day + "/" + tellingdag.Datum.Date.Month + "/" + tellingdag.Datum.Date.Year;
            return View(new Tijdvak());
        }

        [HttpPost]
        public ActionResult CreateTijdvak([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker, TellingDag tellingdag, Tijdvak tijdvak)
        {                       
                medewerker.GetTellingDag(tellingdag.TellingDagId).Tijdvakken.Add(tijdvak);
                _medewerkerRepository.SaveChanges();
                TempData["Msg"] = "Tijdspanne succesvol aangemaakt!";
                return RedirectToAction("Index", "Telling");           
        }

        public ActionResult CreateTijdvakId([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker, int tellingDagId)
        {
            var tellingdag = medewerker.GetTellingDag(tellingDagId);
            ViewBag.Message = tellingdag.Naam + " " + tellingdag.Datum.Date.Day + "/" + tellingdag.Datum.Date.Month + "/" + tellingdag.Datum.Date.Year;
            return View(new Tijdvak());
        }

        [HttpPost]
        public ActionResult CreateTijdvakId([ModelBinder(typeof(MedewerkerModelBinder))] Medewerker medewerker, int tellingDagId, Tijdvak tijdvak)
        {
            medewerker.GetTellingDag(tellingDagId).Tijdvakken.Add(tijdvak);
            _medewerkerRepository.SaveChanges();
            TempData["Msg"] = "Tijdspanne succesvol aangemaakt!";
            return RedirectToAction("Index", "Telling");       
        }
    }
}
